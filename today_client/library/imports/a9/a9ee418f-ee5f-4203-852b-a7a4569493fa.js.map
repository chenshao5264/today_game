{"version":3,"sources":["assets/Script/controllers/LoginController.js"],"names":["http","require","config","smsg","protocol","msgid2proto","cc","Class","extends","Component","properties","btnRegister","default","type","Button","btnLogin","ebxNickname","EditBox","ebxAccount","ebxPasswrod","labelTips","Label","onBtnRegister","event","data","self","string","nickname","account","pwd","rawData","password","on","CL_REGISTER_REQ","errcode","send","onBtnLogin","closeSocket","onLoad","connectLoginServer"],"mappings":";;;;;;AAAA,IAAIA,OAASC,QAAQ,eAAR,CAAb;AACA,IAAIC,SAASD,QAAQ,WAAR,CAAb;;AAEA,IAAIE,OAAcF,QAAQ,mBAAR,CAAlB;AACA,IAAIG,WAAcH,QAAQ,iBAAR,EAA2BG,QAA7C;AACA,IAAIC,cAAcJ,QAAQ,iBAAR,EAA2BI,WAA7C;;AAEAC,GAAGC,KAAH,CAAS;AACLC,aAASF,GAAGG,SADP;;AAGLC,gBAAY;AACRC,qBAAa;AACTC,qBAAS,IADA;AAETC,kBAAMP,GAAGQ;AAFA,SADL;AAKRC,kBAAU;AACNH,qBAAS,IADH;AAENC,kBAAMP,GAAGQ;AAFH,SALF;AASRE,qBAAa;AACTJ,qBAAS,IADA;AAETC,kBAAMP,GAAGW;AAFA,SATL;AAaRC,oBAAY;AACRN,qBAAS,IADD;AAERC,kBAAMP,GAAGW;AAFD,SAbJ;AAiBRE,qBAAa;AACTP,qBAAS,IADA;AAETC,kBAAMP,GAAGW;AAFA,SAjBL;;AAsBRG,mBAAW;AACPR,qBAAS,IADF;AAEPC,kBAAMP,GAAGe;AAFF;AAtBH,KAHP;;AA+BLC,mBAAe,uBAASC,KAAT,EAAgBC,IAAhB,EAAsB;AACjC,YAAIC,OAAO,IAAX;AACAA,aAAKL,SAAL,CAAeM,MAAf,GAAwB,SAAxB;;AAEA,YAAIC,WAAWF,KAAKT,WAAL,CAAiBU,MAAhC;AACA,YAAIE,UAAWH,KAAKP,UAAL,CAAgBQ,MAA/B;AACA,YAAIG,MAAWJ,KAAKN,WAAL,CAAiBO,MAAhC;;AAEA,YAAII,UAAU,EAACF,SAASA,OAAV,EAAmBG,UAAUF,GAA7B,EAAkCF,UAAUA,QAA5C,EAAd;;AAEAxB,aAAK6B,EAAL,CAAQ3B,YAAYD,SAAS6B,eAArB,CAAR,EAA+C,UAAST,IAAT,EAAe;AAC1D,gBAAIA,KAAKU,OAAL,IAAgB,CAApB,EAAuB;AACnBT,qBAAKL,SAAL,CAAeM,MAAf,GAAwB,MAAxB;AACH;AACJ,SAJD;AAKAvB,aAAKgC,IAAL,CAAU/B,SAAS6B,eAAnB,EAAoCH,OAApC;AACH,KA/CI;;AAiDLM,gBAAY,oBAASb,KAAT,EAAgBC,IAAhB,EAAsB;AAC9B,YAAIC,OAAO,IAAX;;AAEAtB,aAAKkC,WAAL,CAAiB,OAAjB;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACH,KAzEI;;AA2EL;AACAC,YAAQ,kBAAY;;AAEhBnC,aAAKoC,kBAAL;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACH;;AAxFI,CAAT","file":"unknown","sourcesContent":["var http   = require(\"../utils/http\");\nvar config = require(\"../config\");\n\nvar smsg        = require(\"../net/socket_msg\")\nvar protocol    = require(\"../net/protocol\").protocol;\nvar msgid2proto = require(\"../net/protocol\").msgid2proto;\n\ncc.Class({\n    extends: cc.Component,\n\n    properties: {\n        btnRegister: {\n            default: null,\n            type: cc.Button\n        },\n        btnLogin: {\n            default: null,\n            type: cc.Button\n        },\n        ebxNickname: {\n            default: null,\n            type: cc.EditBox\n        },\n        ebxAccount: {\n            default: null,\n            type: cc.EditBox\n        },\n        ebxPasswrod: {\n            default: null,\n            type: cc.EditBox\n        },\n        \n        labelTips: {\n            default: null,\n            type: cc.Label\n        }\n    },\n\n    onBtnRegister: function(event, data) {\n        var self = this;\n        self.labelTips.string = \"正在注册...\"\n\n        var nickname = self.ebxNickname.string;\n        var account  = self.ebxAccount.string;\n        var pwd      = self.ebxPasswrod.string;\n\n        var rawData = {account: account, password: pwd, nickname: nickname}\n\n        smsg.on(msgid2proto[protocol.CL_REGISTER_REQ], function(data) {\n            if (data.errcode == 0) {\n                self.labelTips.string = \"注册成功\";\n            }\n        });\n        smsg.send(protocol.CL_REGISTER_REQ, rawData);\n    },\n\n    onBtnLogin: function(event, data) {\n        var self = this;\n\n        smsg.closeSocket(\"login\");\n\n        // self.labelTips.string = \"正在登录...\"\n        \n        // var account = self.ebxAccount.string;\n        // var pwd     = self.ebxPasswrod.string;\n        // var url     = config.HTTP_IP_PORT +  \"/login?account=\" + account + \"&password=\" + pwd;\n\n        // http.get_http(url, function(res) {\n        //     console.log(res);\n        //     if (Number(res.errcode) == 0) {\n        //         self.labelTips.string = \"登陆成功\";\n\n        //         net.makeConnect(function() {\n        //             cc.gg.utils.enterScene(\"HallScene\");\n        //         });\n                \n        //     } else if (Number(res.errcode) == 1) {\n        //         self.labelTips.string = \"登陆失败,账号或密码错误\";\n        //     }\n        // });\n    },\n\n    // use this for initialization\n    onLoad: function () {\n\n        smsg.connectLoginServer();\n\n        // var NetworkCtrl = require(\"../net/NetworkCtrl\");\n        // var loginNetCtrl = new NetworkCtrl();\n        // loginNetCtrl.init(\"login\");\n        // loginNetCtrl.makeConnect();\n        // cc.gg.loginNetCtrl = loginNetCtrl;\n        // \n\n        //Protobufjs.load()\n    },\n\n    // called every frame, uncomment this function to activate update callback\n    // update: function (dt) {\n\n    // },\n});\n"]}