{"version":3,"sources":["assets/Script/controllers/LoginController.js"],"names":["http","require","config","smsg","protocol","cc","Class","extends","Component","properties","btnRegister","default","type","Button","btnLogin","ebxNickname","EditBox","ebxAccount","ebxPasswrod","labelTips","Label","onBtnRegister","event","data","self","string","packet","msgid","P_CL_REGISTER_REQ","body","nickname","account","pwd","register","on","P_LC_REGISTER_ACK","errcode","send","onBtnLogin","closeSocket","onLoad","connectLoginServer"],"mappings":";;;;;;AAAA,IAAIA,OAASC,QAAQ,eAAR,CAAb;AACA,IAAIC,SAASD,QAAQ,WAAR,CAAb;;AAEA,IAAIE,OAAcF,QAAQ,mBAAR,CAAlB;AACA,IAAIG,WAAcH,QAAQ,iBAAR,EAA2BG,QAA7C;;AAEAC,GAAGC,KAAH,CAAS;AACLC,aAASF,GAAGG,SADP;;AAGLC,gBAAY;AACRC,qBAAa;AACTC,qBAAS,IADA;AAETC,kBAAMP,GAAGQ;AAFA,SADL;AAKRC,kBAAU;AACNH,qBAAS,IADH;AAENC,kBAAMP,GAAGQ;AAFH,SALF;AASRE,qBAAa;AACTJ,qBAAS,IADA;AAETC,kBAAMP,GAAGW;AAFA,SATL;AAaRC,oBAAY;AACRN,qBAAS,IADD;AAERC,kBAAMP,GAAGW;AAFD,SAbJ;AAiBRE,qBAAa;AACTP,qBAAS,IADA;AAETC,kBAAMP,GAAGW;AAFA,SAjBL;;AAsBRG,mBAAW;AACPR,qBAAS,IADF;AAEPC,kBAAMP,GAAGe;AAFF;AAtBH,KAHP;;AA+BLC,mBAAe,uBAASC,KAAT,EAAgBC,IAAhB,EAAsB;AACjC,YAAIC,OAAO,IAAX;AACAA,aAAKL,SAAL,CAAeM,MAAf,GAAwB,SAAxB;;AAEA,YAAIC,SAAS,EAAb;AACAA,eAAOC,KAAP,GAAevB,SAASwB,iBAAxB;;AAEA,YAAIC,OAAO,EAAX;AACAA,aAAKC,QAAL,GAAgBN,KAAKT,WAAL,CAAiBU,MAAjC;AACAI,aAAKE,OAAL,GAAgBP,KAAKP,UAAL,CAAgBQ,MAAhC;AACAI,aAAKG,GAAL,GAAgBR,KAAKN,WAAL,CAAiBO,MAAjC;AACAC,eAAOO,QAAP,GAAoBJ,IAApB;;AAEA1B,aAAK+B,EAAL,CAAQ9B,SAAS+B,iBAAjB,EAAoC,UAASZ,IAAT,EAAe;AAC/C,gBAAIM,OAAON,KAAKU,QAAhB;AACA,gBAAIJ,KAAKO,OAAL,IAAgB,CAApB,EAAuB;AACnBZ,qBAAKL,SAAL,CAAeM,MAAf,GAAwB,MAAxB;AACH;AACJ,SALD;AAMAtB,aAAKkC,IAAL,CAAUX,MAAV;AACH,KAnDI;;AAqDLY,gBAAY,oBAAShB,KAAT,EAAgBC,IAAhB,EAAsB;AAC9B,YAAIC,OAAO,IAAX;;AAEArB,aAAKoC,WAAL,CAAiB,OAAjB;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACH,KA7EI;;AA+EL;AACAC,YAAQ,kBAAY;;AAEhBrC,aAAKsC,kBAAL;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACH;;AA5FI,CAAT","file":"unknown","sourcesContent":["var http   = require(\"../utils/http\");\nvar config = require(\"../config\");\n\nvar smsg        = require(\"../net/socket_msg\")\nvar protocol    = require(\"../net/protocol\").protocol;\n\ncc.Class({\n    extends: cc.Component,\n\n    properties: {\n        btnRegister: {\n            default: null,\n            type: cc.Button\n        },\n        btnLogin: {\n            default: null,\n            type: cc.Button\n        },\n        ebxNickname: {\n            default: null,\n            type: cc.EditBox\n        },\n        ebxAccount: {\n            default: null,\n            type: cc.EditBox\n        },\n        ebxPasswrod: {\n            default: null,\n            type: cc.EditBox\n        },\n        \n        labelTips: {\n            default: null,\n            type: cc.Label\n        }\n    },\n\n    onBtnRegister: function(event, data) {\n        var self = this;\n        self.labelTips.string = \"正在注册...\"\n\n        let packet = {}\n        packet.msgid = protocol.P_CL_REGISTER_REQ;\n\n        let body = {}\n        body.nickname = self.ebxNickname.string;\n        body.account  = self.ebxAccount.string;\n        body.pwd      = self.ebxPasswrod.string;\n        packet.register   = body;\n\n        smsg.on(protocol.P_LC_REGISTER_ACK, function(data) {\n            let body = data.register;\n            if (body.errcode == 0) {\n                self.labelTips.string = \"注册成功\";\n            }\n        });\n        smsg.send(packet);\n    },\n\n    onBtnLogin: function(event, data) {\n        var self = this;\n\n        smsg.closeSocket(\"login\");\n\n        // self.labelTips.string = \"正在登录...\"\n        \n        // var account = self.ebxAccount.string;\n        // var pwd     = self.ebxPasswrod.string;\n        // var url     = config.HTTP_IP_PORT +  \"/login?account=\" + account + \"&password=\" + pwd;\n\n        // http.get_http(url, function(res) {\n        //     console.log(res);\n        //     if (Number(res.errcode) == 0) {\n        //         self.labelTips.string = \"登陆成功\";\n\n        //         net.makeConnect(function() {\n        //             cc.gg.utils.enterScene(\"HallScene\");\n        //         });\n                \n        //     } else if (Number(res.errcode) == 1) {\n        //         self.labelTips.string = \"登陆失败,账号或密码错误\";\n        //     }\n        // });\n    },\n\n    // use this for initialization\n    onLoad: function () {\n\n        smsg.connectLoginServer();\n\n        // var NetworkCtrl = require(\"../net/NetworkCtrl\");\n        // var loginNetCtrl = new NetworkCtrl();\n        // loginNetCtrl.init(\"login\");\n        // loginNetCtrl.makeConnect();\n        // cc.gg.loginNetCtrl = loginNetCtrl;\n        // \n\n        //Protobufjs.load()\n    },\n\n    // called every frame, uncomment this function to activate update callback\n    // update: function (dt) {\n\n    // },\n});\n"]}