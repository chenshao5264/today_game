{"version":3,"sources":["assets/Script/net/socket_msg.js"],"names":["protobufjs","require","msgid2proto","sockets","URL_LOGIN","_isHandling","msgQueue","handleQueue","setInterval","length","console","log","msg","shift","eventname","id","listener","listeners","cc","Class","statics","on","off","closeSocket","stage","login","disconnect","connectLoginServer","url","Scon","scon","makeConnect","onConnected","data","onDisconnect","onMessage","buffer","bufferArray","Object","keys","map","k","decode","push","send","msgid","rawData","socket","encode","emit"],"mappings":"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","file":"unknown","sourcesContent":["\nvar protobufjs = require(\"./socket_protobufjs\");\nvar msgid2proto = require(\"./protocol\").msgid2proto;\nvar sockets = {};\n\nvar URL_LOGIN = \"ws://192.168.0.109:9100\";\n\nvar _isHandling = false;\nvar msgQueue    = [];\n\nvar handleQueue = function() {\n    if (_isHandling == false) {\n        _isHandling = true;\n        setInterval(function() {\n            if (msgQueue.length > 0) {\n                console.log(\"msgQueue.length: \" + msgQueue.length)\n                var msg = msgQueue.shift();\n\n                var eventname = msgid2proto[msg.id]\n                if (eventname) {\n                    var listener = listeners[eventname]\n                    if (listener) {\n                        listener(msg);\n                    }\n                }\n            }\n        }, 1000)\n    }\n}\n\nvar listeners = {}\n\ncc.Class({\n    statics: {\n        on: function(eventname, listener) {\n            if (listeners[eventname] == null) {\n                listeners[eventname] = listener;\n            }\n        },\n        off: function(eventname) {\n            if (listeners[eventname]) {\n                listeners[eventname] = null;\n            }\n        },\n        closeSocket: function(stage) {\n            if (sockets.login) {\n                sockets.login.disconnect()\n            }\n        },\n        connectLoginServer: function(url) {\n            url = url ? url : URL_LOGIN;\n            var Scon = require(\"./socket_connect\");\n            var scon = new Scon();\n            sockets.login = scon.makeConnect(url, \"login\");\n        },\n        onConnected: function(data, stage) {\n            console.log(\"connect: \" + stage);\n\n            handleQueue();\n        },\n        onDisconnect: function(data, stage) {\n            console.log(\"disconnect: \" + stage);\n            sockets.login = null;\n        },\n        onMessage: function(data) {\n            var buffer = data.buffer;\n            var bufferArray = Object.keys(buffer).map(function(k) {\n                return buffer[k];\n            });\n\n            var msg = protobufjs.decode(data.id, bufferArray);\n            msg.id = data.id;\n            msgQueue.push(msg);\n        },\n        send: function(msgid, rawData) {\n            var socket = null;\n            if (msgid >= 100 && msgid < 500) {\n                socket = sockets.login;\n            }\n\n            if (socket == null) {\n                console.log(\"socket = null\");\n                return;\n            }\n\n            var buffer = protobufjs.encode(msgid, rawData);\n            socket.emit(\"message\", {id: msgid, buffer: buffer});\n        }\n    }\n});"]}