{"version":3,"sources":["assets/Script/net/socket_msg.js"],"names":["protobufjs","require","sockets","URL_LOGIN","_isHandling","msgQueue","handleQueue","setInterval","length","msg","shift","listener","listeners","msgid","console","log","cc","Class","statics","on","eventid","off","closeSocket","stage","login","disconnect","connectLoginServer","url","Sser","sser","makeConnect","onConnected","data","onDisconnect","onMessage","bufferArray","Uint8Array","decode","push","send","packet","socket","encode","emit"],"mappings":";;;;;;AACA,IAAIA,aAAaC,QAAQ,qBAAR,CAAjB;AACA,IAAIC,UAAU,EAAd;;AAEA,IAAIC,YAAY,qBAAhB;;AAEA,IAAIC,cAAc,KAAlB;AACA,IAAIC,WAAc,EAAlB;;AAEA,IAAIC,cAAc,SAAdA,WAAc,GAAW;AACzB,QAAIF,eAAe,KAAnB,EAA0B;AACtBA,sBAAc,IAAd;AACAG,oBAAY,YAAW;AACnB,gBAAIF,SAASG,MAAT,GAAkB,CAAtB,EAAyB;AACrB,oBAAIC,MAAMJ,SAASK,KAAT,EAAV;AACA,oBAAIC,WAAWC,UAAUH,IAAII,KAAd,CAAf;AACA,oBAAIF,QAAJ,EAAc;AACVG,4BAAQC,GAAR,CAAY,mBAAmBN,IAAII,KAAnC;AACAF,6BAASF,GAAT;AACH,iBAHD,MAGO;AACHK,4BAAQC,GAAR,CAAY,sBAAsBN,IAAII,KAAtC;AACH;AACJ;AACJ,SAXD,EAWG,GAXH;AAYH;AACJ,CAhBD;;AAkBA,IAAID,YAAY,EAAhB;;AAEAI,GAAGC,KAAH,CAAS;AACLC,aAAS;AACLC,YAAI,YAASC,OAAT,EAAkBT,QAAlB,EAA4B;AAC5B,gBAAIC,UAAUQ,OAAV,KAAsB,IAA1B,EAAgC;AAC5BR,0BAAUQ,OAAV,IAAqBT,QAArB;AACH;AACJ,SALI;AAMLU,aAAK,aAASD,OAAT,EAAkB;AACnB,gBAAIR,UAAUQ,OAAV,CAAJ,EAAwB;AACpBR,0BAAUQ,OAAV,IAAqB,IAArB;AACH;AACJ,SAVI;AAWLE,qBAAa,qBAASC,KAAT,EAAgB;AACzB,gBAAIrB,QAAQsB,KAAZ,EAAmB;AACftB,wBAAQsB,KAAR,CAAcC,UAAd;AACH;AACJ,SAfI;AAgBLC,4BAAoB,4BAASC,GAAT,EAAc;AAC9BA,kBAAMA,MAAMA,GAAN,GAAYxB,SAAlB;AACA,gBAAIyB,OAAO3B,QAAQ,kBAAR,CAAX;AACA,gBAAI4B,OAAO,IAAID,IAAJ,EAAX;AACA1B,oBAAQsB,KAAR,GAAgBK,KAAKC,WAAL,CAAiBH,GAAjB,EAAsB,OAAtB,CAAhB;AACH,SArBI;AAsBLI,qBAAa,qBAASC,IAAT,EAAeT,KAAf,EAAsB;AAC/BT,oBAAQC,GAAR,CAAY,cAAcQ,KAA1B;;AAEAjB;AACH,SA1BI;AA2BL2B,sBAAc,sBAASD,IAAT,EAAeT,KAAf,EAAsB;AAChCT,oBAAQC,GAAR,CAAY,iBAAiBQ,KAA7B;AACArB,oBAAQsB,KAAR,GAAgB,IAAhB;AACH,SA9BI;AA+BLU,mBAAW,mBAASF,IAAT,EAAe;AACtB,gBAAIG,cAAc,IAAIC,UAAJ,CAAeJ,IAAf,CAAlB;AACA,gBAAIvB,MAAMT,WAAWqC,MAAX,CAAkBF,WAAlB,CAAV;AACA9B,qBAASiC,IAAT,CAAc7B,GAAd;AACH,SAnCI;AAoCL8B,cAAM,cAASC,MAAT,EAAiB;AACnB,gBAAIC,SAAS,IAAb;AACA,gBAAI5B,QAAQ2B,OAAO3B,KAAnB;AACA,gBAAIA,SAAS,GAAT,IAAgBA,QAAQ,GAA5B,EAAiC;AAC7B4B,yBAASvC,QAAQsB,KAAjB;AACH;;AAED,gBAAIiB,UAAU,IAAd,EAAoB;AAChB3B,wBAAQC,GAAR,CAAY,eAAZ;AACA;AACH;;AAEDyB,qBAASxC,WAAW0C,MAAX,CAAkBF,MAAlB,CAAT;AACAC,mBAAOE,IAAP,CAAY,SAAZ,EAAuBH,MAAvB;AACH;AAlDI;AADJ,CAAT","file":"unknown","sourcesContent":["\nvar protobufjs = require(\"./socket_protobufjs\");\nvar sockets = {};\n\nvar URL_LOGIN = \"ws://127.0.0.1:9100\";\n\nvar _isHandling = false;\nvar msgQueue    = [];\n\nvar handleQueue = function() {\n    if (_isHandling == false) {\n        _isHandling = true;\n        setInterval(function() {\n            if (msgQueue.length > 0) {\n                var msg = msgQueue.shift();\n                var listener = listeners[msg.msgid];\n                if (listener) {\n                    console.log(\"hande msgid = \" + msg.msgid);\n                    listener(msg);\n                } else {\n                    console.log(\"un hande msgid = \" + msg.msgid);\n                }\n            }\n        }, 100)\n    }\n}\n\nvar listeners = {}\n\ncc.Class({\n    statics: {\n        on: function(eventid, listener) {\n            if (listeners[eventid] == null) {\n                listeners[eventid] = listener;\n            }\n        },\n        off: function(eventid) {\n            if (listeners[eventid]) {\n                listeners[eventid] = null;\n            }\n        },\n        closeSocket: function(stage) {\n            if (sockets.login) {\n                sockets.login.disconnect()\n            }\n        },\n        connectLoginServer: function(url) {\n            url = url ? url : URL_LOGIN;\n            var Sser = require(\"./socket_service\");\n            var sser = new Sser();\n            sockets.login = sser.makeConnect(url, \"login\");\n        },\n        onConnected: function(data, stage) {\n            console.log(\"connect: \" + stage);\n\n            handleQueue();\n        },\n        onDisconnect: function(data, stage) {\n            console.log(\"disconnect: \" + stage);\n            sockets.login = null;\n        },\n        onMessage: function(data) {\n            let bufferArray = new Uint8Array(data);\n            var msg = protobufjs.decode(bufferArray);\n            msgQueue.push(msg);\n        },\n        send: function(packet) {\n            var socket = null;\n            let msgid = packet.msgid;\n            if (msgid >= 100 && msgid < 500) {\n                socket = sockets.login;\n            }\n\n            if (socket == null) {\n                console.log(\"socket = null\");\n                return;\n            }\n\n            packet = protobufjs.encode(packet);\n            socket.emit(\"message\", packet);\n        }\n    }\n});"]}